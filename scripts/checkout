#!/usr/bin/env python3
"""Checkout or switch worktrees by reading worktrees.

This does not do the actual switching. Just prints out the commands that would be run which can be executed.
"""
from __future__ import annotations

import subprocess
import sys
from dataclasses import dataclass
from pathlib import Path
from typing import Final, Optional


@dataclass
class Worktree:
    """A worktree.

    Attributes:
        path: The path to the worktree.
        branch: The branch of the worktree.
    """

    path: str
    sha: str
    branch: str

    @classmethod
    def from_bytes(cls, line: bytes) -> Worktree:
        """Create a worktree from a line of bytes.

        Args:
            line: The line of bytes to parse.
        """
        path, sha, *branch = line.decode().split()
        if len(branch) > 0 and branch[0].startswith("(detached"):
            branch = ["detached"]
        assert len(branch) == 1, f"Branch should have a single member '{branch}'"
        return cls(path, sha, branch[0])


def main():
    """Main function for checkout branches.

    If there is only one argument, it is assumed to be a branch or path to a worktree.
    """
    if len(sys.argv) != 2:
        arguments = " ".join(sys.argv[1:])
        print(f"git checkout {arguments}")
        return
    argument: Final[str] = sys.argv[1]
    try:
        res: list[bytes] = subprocess.check_output(["git", "worktree", "list"]).split(b"\n")
    except subprocess.CalledProcessError as error:
        print(error, file=sys.stderr)
        sys.exit(1)
    worktrees: list[Worktree] = [Worktree.from_bytes(line) for line in res if len(line) > 0]
    worktrees_by_path: dict[str, Worktree] = {}
    worktrees_by_branch: dict[str, Worktree] = {}
    for worktree in worktrees:
        worktrees_by_path[Path(worktree.path).stem] = worktree
        worktrees_by_branch[worktree.branch] = worktree
    to_switch: Optional[Worktree] = worktrees_by_branch.get(argument, worktrees_by_path.get(argument, None))
    if to_switch:
        # If branch or path belongs to a worktree switch to worktree
        print(f"cd {to_switch.path}")
        return
    print(f"git checkout {argument}")


if __name__ == "__main__":
    main()
