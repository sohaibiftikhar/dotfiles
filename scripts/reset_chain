#!/usr/bin/env python
"""Resets chain to commits from the combined branch based on specs in chain.

By default only prints out the commands it would run. Pipe to bash to actually execute the commands.
"""
import os
from typing import Optional

# pip install click
import click
import yaml

# pip install GitPython
from git.repo import Repo

# pip install pyyaml
from yaml.loader import SafeLoader


@click.option(
    "-c",
    "--config",
    help="The config file to load for the chain. Default is at $HOME/.config/chain.conf",
    default=None,
)
@click.option(
    "-b",
    "--branch",
    help="The combined branch which sits at the end of the chain. Default is to pick the currently active branch.",
    default=None,
)
@click.command()
def cli(config: str, branch: Optional[str]):
    """Helps manage chained branches.

    Maps commits from the combined branch (--branch) to each branch in the chain as specified by the number of commits
    in the chain config.

    Config is in yaml format. Example format for the config file is:

    \b
    -
        - sohaib/feature/mns # Branch name
        - 3 # num commits in branch
    -
        - sohaib/feature/clip
        - 1

    Example:
    If combined branch as commits (a, b, c, d) with d being the most recent and the following chain config

    \b
    -
        - branch1
        - 1
    -
        - branch2
        - 2
    -
        - branch3
        - 1

    Then reset_chain will reset:

    \b
    - branch1 to commit a
    - branch2 to commit c (since it had commit count of 2)
    - branch3 to commit d
    """  # noqa: D301 (Need \b for raw formatting).

    conf_home = os.environ.get("HOME", ".") + "/.config"
    config = config or f"{conf_home}/chain.conf"
    tries = (
        config,
        f"{conf_home}/{config}",
        f"{conf_home}/{config}.conf",
        f"{conf_home}/chain{config}.conf",
    )
    found = False
    for conf in tries:
        if os.path.exists(conf):
            config = conf
            found = True
            break
    if not found:
        raise ValueError("Config file not found. Tried the following locations: ", tries)
    print(f"# Using config file: {config}")
    with open(config) as fstream:
        chain = yaml.load(fstream, SafeLoader)
    assert isinstance(chain, list)

    repo = Repo(os.environ.get("REPO_PATH"))
    combined_branch = branch or repo.active_branch
    num_commits = sum(num_commits_in_branch for _, num_commits_in_branch in chain)
    commits = list(repo.iter_commits(combined_branch, max_count=num_commits))
    commits.reverse()
    expected_commits = sum(num_commits for _, num_commits in chain)
    branches = set(head.name for head in repo.heads)
    assert len(commits) == expected_commits, f"{len(commits)} != {expected_commits}"
    print(f"git checkout {combined_branch}")
    commit_idx = 0
    for branch, num_commits_in_branch in chain:
        commit = commits[commit_idx + (num_commits_in_branch - 1)]
        commit_idx = commit_idx + num_commits_in_branch
        message = commit.message.split("\n")[0].strip()
        new_branch_flag = ""
        if branch not in branches:
            new_branch_flag = "-b"
        print(
            f"git checkout {new_branch_flag} {branch} && git reset --hard {commit.hexsha[:10]} && "
            f"git push --force-with-lease --set-upstream origin {branch}"
            f" # {message}"
        )
    if combined_branch != chain[-1][0]:
        print(f"git checkout {combined_branch}")


if __name__ == "__main__":
    cli()
